Title:  Apache SIS branches
Notice: Licensed to the Apache Software Foundation (ASF) under one
        or more contributor license agreements.  See the NOTICE file
        distributed with this work for additional information
        regarding copyright ownership.  The ASF licenses this file
        to you under the Apache License, Version 2.0 (the
        "License"); you may not use this file except in compliance
        with the License.  You may obtain a copy of the License at
        .
          http://www.apache.org/licenses/LICENSE-2.0
        .
        Unless required by applicable law or agreed to in writing,
        software distributed under the License is distributed on an
        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
        KIND, either express or implied.  See the License for the
        specific language governing permissions and limitations
        under the License.


The [source code repository](source.html) contains `"geoapi-3.1"` and `"geoapi-4.0"` branches in addition of `master`.
The Apache SIS releases are created from the code on `master` only.
However the actual development occurs on the `"geoapi-4.0"` branch before to be merged to `master`.
Those branches exist in order to experiment early new API and technologies — since it may impact
the library design — while keeping the releases compatible with officially released environments.
This page describes the Apache SIS development branches and provides some coding recommendations
for making merges easier.

[TOC]



The development branches    {#development}
==========================================

Users who want stability are encouraged to build from the `master`.
The master depends on GeoAPI 3.0.1,
which is the [latest GeoAPI][geoapi-stable] released by the Open Geospatial Consortium (OGC).
Developers who want to contribute to Apache SIS are encouraged to use the `geoapi-4.0` branch for now.



GeoAPI 4.0 branch    {#geoapi-4.0}
----------------------------------

The `geoapi-4.0` branch is the recommended development branch for now.
This branch implements the interfaces defined in GeoAPI 4.0 snapshot milestones.
This branch uses new interfaces introduced in GeoAPI 4.0-SNAPSHOT and contains upgrades for changes in existing GeoAPI interfaces.
Some changes in GeoAPI 4.0-SNAPSHOT interfaces are incompatible with GeoAPI 3.0.1 interfaces.
They are caused by changes in the underlying international standards, or by evolution of Java technology.
The content of this branch may be fully merged to `master` in the future, depending on new GeoAPI releases from OGC.



GeoAPI 3.1 branch    {#geoapi-3.1}
----------------------------------

The `geoapi-3.1` branch implements the interfaces defined in [GeoAPI 3.1 snapshot][geoapi-snapshot] milestones.
It has the same content that the `geoapi-4.0` branch, excluding changes that are incompatible with GeoAPI 3.0.1.
Developments happen on `geoapi-4.0` and are periodically merged to `geoapi-3.1` with the necessary modifications.
This branch is used merely as an intermediate step between the development branch (`geoapi-4.0`) and `master`.
Its content may be fully merged to `master` in the future, after new GeoAPI releases from OGC.



Master    {#master}
-------------------

The master is a merge of `geoapi-3.1` branch ported to the interfaces defined by the [GeoAPI stable release][geoapi-stable].
This is the code which is built by the continuous integration system and deployed on the Maven repository.
**Git `push --force` are not allowed on this branch. Commits on `master` can not be removed.**
Commits should be pushed on the development branch first, so they can be rearranged if needed before merge to `master`.


### Code differences    {#differences}

The main differences (apart version number) between `master` and `geoapi` branches
are the modifications necessary for implementing an older version of the GeoAPI interfaces.
In particular, usages of non-released GeoAPI interfaces may be replaced by direct usages of the corresponding Apache SIS implementation.

For security reasons and for avoiding misleading information, the following functionalities are disabled on master
(but are still enabled on branches as experimental features). In particular the `Supervisor.ENABLED` flag controls
whether the MBeans documented in the `org.apache.sis.console` package are enabled or not.

  * In `core/sis-utility/src/main/java/org/apache/sis/internal/system/Supervisor.java`, the `ENABLED` flag is set to `false`.
  * In `core/sis-utility/src/main/java/org/apache/sis/internal/util/TemporalUtilities.java`, the `REPORT_MISSING_MODULE` flag is set to `false`.

Above flag values may change in future SIS releases.


### Behavioral differences    {#behavior}

Because of changes between GeoAPI 3.0 and GeoAPI 4.0-SNAPSHOT, the following aspects need special care:

  * If `op` is an instance of `PassThroughOperation`, then the `if (op instanceof SingleOperation)` expression
    evaluates to `true` on master but to `false` on SIS development branches.



Coding recommendations    {#recommendations}
============================================

The following recommendations aim to make the merges easier by reducing the extend of potential conflicts.



Formatting   {#formatting}
--------------------------

Refrain from doing massive code reformatting unless:

  * the modified files do not yet exist on the other branches;
  * or the modified lines are known to be identical on all active branches (merges work well in such cases);
  * or the committer is willing to resolve the merge conflicts.



Import statements    {#imports}
-------------------------------

Isolate at the end of the imports section any import statements that are specific to a platform.
This separation allows any branch to re-arrange the common import statements without generating
conflicts with the platform-dependent import statements. Example:

    :::java
    import java.io.File;
    import java.util.List;
    import org.opengis.metadata.Metadata;

    // Branch-specific imports
    import org.opengis.feature.Feature;



Substitution for non-existent classes    {#substitutions}
---------------------------------------------------------

When using a JDK9 class that does not exist on JDK8, define a class of the same name in a
`org.apache.sis.internal` sub-package with the minimal amount of needed functionalities,
provided that it can be done with reasonable effort. Otherwise just delete the JDK9-dependent
code from the development branch.


[geoapi-stable]:   http://www.geoapi.org/3.0/index.html
[geoapi-snapshot]: http://www.geoapi.org/snapshot/index.html
