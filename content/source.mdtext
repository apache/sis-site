Title:  Checkout source code
Notice: Licensed to the Apache Software Foundation (ASF) under one
        or more contributor license agreements.  See the NOTICE file
        distributed with this work for additional information
        regarding copyright ownership.  The ASF licenses this file
        to you under the Apache License, Version 2.0 (the
        "License"); you may not use this file except in compliance
        with the License.  You may obtain a copy of the License at
        .
          http://www.apache.org/licenses/LICENSE-2.0
        .
        Unless required by applicable law or agreed to in writing,
        software distributed under the License is distributed on an
        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
        KIND, either express or implied.  See the License for the
        specific language governing permissions and limitations
        under the License.


Apache SIS source code is maintained using [Git][git] version control,
completed by optional data maintained using [Subversion][subversion] version control.
Optional data include in particular the [EPSG geodetic dataset][epsg-install],
which is subject to licensing terms different than Apache ones.
This page describes two ways to checkout Apache SIS source code:

  * A basic checkout with only the main repository, the most stable branch, and no configuration requirement.
  * A more advanced configuration for active SIS developments, using uncommitted (for now) API
    and including optional data for more extensive tests.

It is possible to start with the basic checkout and migrate to the advanced configuration later,
or to cherry-pick only the interesting parts of the advanced configuration.

[TOC]



Basic installation    {#basic}
==============================

Create an empty directory for the Apache SIS project.
We use `ApacheSIS` directory name in this page, but that name can be anything;
replace that name in the shell commands below if another name is used.
The Apache SIS source code can be cloned in that directory as below
(lines starting with `#` are comments and can be ignored):

    :::bash
    mkdir ApacheSIS
    cd ApacheSIS
    git clone https://gitbox.apache.org/repos/asf/sis
    # Alternatively, GitHub mirror can also be used:
    # git clone https://github.com/apache/sis

That is all. Apache SIS can be built by running `mvn install` in the `sis` subdirectory.
At this stage, the `ApacheSIS` parent directory is redundant with the `sis` subdirectory,
but we recommend to create that parent directory anyway in anticipation
for more subdirectories to be created later, when desired.
The remaining of this page describes those optional configurations for more advanced developments.



Advanced installation    {#advanced}
====================================

This section assumes that above-described basic checkout has been done.
All subsections below are optional. It is not mandatory to execute all of them,
but we recommend to at least create the data directory described below
because some other optional services depend on it.


Create data directory    {#data}
--------------------------------

Apache SIS needs a directory where to store database, datum shift files and other optional data.
That directory is specified by the `SIS_DATA` environment variable and can be located anywhere.
A convenient location is a subdirectory of the `ApacheSIS` directory created in the "basic checkout" section.
For example (with `ApacheSIS` as the current directory):

    :::bash
    mkdir Data
    export SIS_DATA=$PWD/Data
    #
    # For making that environment variable available in future shell sessions,
    # the output of following command can be added to .bash_profile or .bashrc
    # file in user home directory.
    #
    echo export SIS_DATA=$SIS_DATA


Checkout non-free data    {#non-free}
-------------------------------------

The EPSG geodetic dataset is recommended for operations related to Coordinate Reference Systems.
Without the EPSG database, only a [small subset](apidocs/org/apache/sis/referencing/CRS.html#forCode-java.lang.String-)
of coordinate reference systems can be created from EPSG codes.
The EPSG database can be [installed in various ways][epsg-install],
but this section describes an alternative way more suitable to Apache SIS development.
Before to continue, make sure to agree with [EPSG terms of use][EPSG-ToU].
Then following command can be executed with `ApacheSIS` as the current directory:

    :::bash
    # Executing this command imply agreement with EPSG terms of use.
    svn checkout https://svn.apache.org/repos/asf/sis/data/non-free/

Then copy or link the EPSG scripts in the directory where Apache SIS looks for optional data.
Adjust the relative paths as needed if the `SIS_DATA` environment variable
points to another location than the one used in above section:

    :::bash
    mkdir $SIS_DATA/Databases
    mkdir $SIS_DATA/Databases/ExternalSources
    cd $SIS_DATA/Databases/ExternalSources
    ln -s ../../../non-free/sis-epsg/src/main/resources/org/apache/sis/referencing/factory/sql/epsg/Data.sql    EPSG_Data.sql
    ln -s ../../../non-free/sis-epsg/src/main/resources/org/apache/sis/referencing/factory/sql/epsg/FKeys.sql   EPSG_FKeys.sql
    ln -s ../../../non-free/sis-epsg/src/main/resources/org/apache/sis/referencing/factory/sql/epsg/Tables.sql  EPSG_Tables.sql
    cd -

This is sufficient for allowing Apache SIS to create the geodetic database
without the need for `sis-epsg` or `sis-embedded-data` module on the classpath.
This setting is not done automatically because Apache projects can not introduce
non-free dependencies without explicit action from user.
If this action is not taken, some JUnit tests requiring EPSG data may be skipped.
If any EPSG file is updated, deleting the `$SIS_DATA/​Databases/​SpatialMetadata` directory
is sufficient for causing Apache SIS to recreate the Derby database with new data.


Configure PostgreSQL    {#postgres}
-----------------------------------

Apache SIS is tested with Derby, HSQL and PostgreSQL databases.
Derby and HSQL are tested automatically using temporary databases in memory.
But testing on PostgreSQL requires the creation of a dedicated database on the developer platform.
The requirements are:

  * PostgreSQL server is running and listening to `localhost` on default port (5432).
  * An empty database named `"SpatialMetadataTest"` exists (Apache SIS will not create it itself).
  * A role having the same name than Unix user name exists
  * Above-cited role can connect to `"SpatialMetadataTest"` without password.

The last point may require the following line in the `pg_hba.conf` file
(location of this file is system-dependent; try `/var/​lib/​pgsql/​data`):

    ::text
    host    all    my_unix_user_name    127.0.0.1/32    trust


Switch to development branch    {#branches}
-------------------------------------------

The source code repository contains `master`, `geoapi-3.1` and `geoapi-4.0` branches.
Apache SIS releases are created from `master`, which depends on the latest GeoAPI version
released by the Open Geospatial Consortium (OGC), currently [GeoAPI 3.0.1][geoapi-stable].
However daily developments occur on the `geoapi-4.0` branch before to be merged (indirectly) to `master`.
Those branches exist in order to experiment early new API and technologies — since it may impact
the library design — while keeping the releases compatible with officially released environments.
In summary:

  * The `geoapi-4.0` branch implements interfaces defined in GeoAPI 4.0 snapshots.
  * The `geoapi-3.1` branch implements interfaces defined in [GeoAPI 3.1 snapshots][geoapi-snapshot].
  * The `master` implements interfaces defined by the [GeoAPI 3.0.1 stable release][geoapi-stable].

Developments on `geoapi-4.0` branch are merged to `geoapi-3.1` branch, which is then merged to `master`.
Note that commits on master can not be removed, since `git push --force` is not allowed on that branch.
If some commits need to be rearranged, it should be done on other branches before merge to `master`.

Developers can switch to the current development branch as below.
Note that those `geoapi-xxx` branches may disappear after OGC released the corresponding GeoAPI versions.

    :::bash
    cd sis
    git checkout geoapi-4.0



History    {#history}
=====================

All developments and tags prior Apache SIS 1.0 were done on a [Subversion][subversion] repository
and can be [browsed online][viewvc].
Tags for Apache SIS versions 0.1 to 0.8 should be fetched from the [SVN repository][svn-sis-tags].
The development branches on that repository were named `JDK8`, `JDK7`, `JDK6` and `trunk`.



Opening Apache SIS in an IDE    {#ide}
======================================

Different SIS branches are available depending on the GeoAPI versions.
The alternatives are listed in [above section](#development).
One thing to take in consideration can be summarized as below:

   * There is no need to build GeoAPI prior working on SIS master.
   * When working on a SIS development branch, we recommend to build GeoAPI 4.0-SNAPSHOT locally first.

While the primarily SIS build system is Maven, the project provides some IDE configuration files for developers convenience.
Before opening the project in an IDE, the source code needs to be downloaded from the source repository
and the project built at least once using Maven:

    :::bash
    git clone https://gitbox.apache.org/repos/asf/sis.git
    cd sis
    mvn install



NetBeans    {#netbeans}
-----------------------

NetBeans can open Maven projects natively. This is the recommended approach for casual working in a small amount of SIS modules.
For extensive work on Apache SIS or for work impacting many modules, it may be more convenient and faster to open Apache SIS as a NetBeans project.
Such pre-configured NetBeans project is available in the `ide-project/NetBeans` directory.
This project will fetch dependencies directly from the `.m2/repository` local directory,
and will refer to the resources `*.utf` files compiled by Maven in the `sis-*/target` directories.
Consequently it is important to run `mvn install` before opening the project
and after any change in the project dependencies or in the resources.

Users can customize their project configuration by editing the `ide-project/NetBeans/nbproject/private/config.properties` file.
The `private` directory is excluded by the versioning system, so it okay to put user-specific information there.
For example in order to overwrite the default location of the local Maven repository and to define a system property at execution time,
one can use:

    :::properties
    maven.repository = /path/to/my/local/repository
    run.jvmargs = -DmyProperty=myValue



Eclipse    {#eclipse}
---------------------

Execute the `svn checkout` to `mvn install` commands documented in the beginning of this section,
then execute the following steps:

   * Execute `mvn eclipse:eclipse` on the command line.
   * Open Eclipse in a new workspace.
   * Go to _Eclipse_ → _Preferences_ → _General_ → _Workspace_.
   * Change _Text file encoding_ to _Other: UTF-8_, press _Apply_, then _Ok_.
   * Go to _File_ → _Import_ → _General_ → _Existing Projects in Workspace_.
   * Choose the `sis` directory and import.



*[ISO]: International Organization for Standardization
*[OGC]: Open Geospatial Consortium

[subversion]:       http://subversion.apache.org
[git]:              http://git-scm.com
[viewvc]:           http://svn.apache.org/viewvc/sis/
[epsg-install]:     epsg.html
[EPSG-ToU]:         http://www.epsg.org/TermsOfUse.aspx
[svn-sis-tags]:     https://svn.apache.org/repos/asf/sis/tags/
[geoapi-stable]:    http://www.geoapi.org/3.0/index.html
[geoapi-snapshot]:  http://www.geoapi.org/snapshot/index.html
