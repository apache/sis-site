Title:  Command-line interface
Notice: Licensed to the Apache Software Foundation (ASF) under one
        or more contributor license agreements.  See the NOTICE file
        distributed with this work for additional information
        regarding copyright ownership.  The ASF licenses this file
        to you under the Apache License, Version 2.0 (the
        "License"); you may not use this file except in compliance
        with the License.  You may obtain a copy of the License at
        .
          http://www.apache.org/licenses/LICENSE-2.0
        .
        Unless required by applicable law or agreed to in writing,
        software distributed under the License is distributed on an
        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
        KIND, either express or implied.  See the License for the
        specific language governing permissions and limitations
        under the License.

A command-line interface is provided for extracting information from a data file.

[TOC]



Installation    {#install}
==========================

Select "Apache SIS 0.6 binary" from the [downloads page](downloads.html) an unzip in any directory.
The directory structure will be as below:

    :::text
    apache-sis-0.6
    ├─ bin
    ├─ conf
    ├─ data
    ├─ lib
    └─ log

The `bin` sub-directory contains a `sis` command for Unix systems (Linux or MacOS — we have not yet done a `sis.bat` file for Windows).
The `bin` sub-directory can be added to the `PATH` environment variable for convenience, but this is not mandatory.
Example:

    :::bash
    export PATH=$PWD/apache-sis-0.6/bin:$PATH

The remaining of this page assumes that `bin` is on the search path.
If not, just prepend the `sis` command by its path (e.g. `./apache-sis-0.6/bin/sis`).


Optional dependencies    {#dependencies}
----------------------------------------

Every JAR files present in the `lib` sub-directory will be included on the classpath during the execution of `sis` command.
By default, the `lib` directory contains only the SIS archive. However users can add other JAR files in that directory for
the following optional dependencies:

  * **Derby driver —**
    needed only if Apache SIS can not locate a JavaDB driver in the JDK installation directory.

  * **UCAR NetCDF library —**
    by default, SIS uses its own embedded NetCDF reader which supports only the classical NetCDF format, as standardized by OGC.
    If there is a need to read files encoded in GRID or HDF formats, then one can copy the UCAR NetCDF library in the `lib` sub-directory.
    If presents, the UCAR library should be detected and used automatically.




Usage    {#usage}
=================

Invoking `sis` without argument show a summary of available commands and all options.
For executing a command, the syntax is:

    :::bash
    sis <command> [options] [files]

Available commands are:

<table>
  <tr><td><code>help</code></td>       <td>Show a help overview.</td></tr>
  <tr><td><code>about</code></td>      <td>Show information about Apache SIS and system configuration.</td></tr>
  <tr><td><code>mime-type</code></td>  <td>Show MIME type for the given file.</td></tr>
  <tr><td><code>metadata</code></td>   <td>Show metadata information for the given file.</td></tr>
  <tr><td><code>crs</code></td>        <td>Show Coordinate Reference System information for the given file or code.</td></tr>
  <tr><td><code>identifier</code></td> <td>Show identifiers for metadata and referencing systems in the given file.</td></tr>
</table>

The set of legal options and the expected number of file arguments depends on the command being executed.
However all commands support the `--help` option, which lists the options available for that command.
Available options will be from the following list:

<table>
  <tr><td><code>--format</code></td>   <td>The output format: <code>xml</code>, <code>wkt</code>, <code>wkt1</code> or <code>text</code>.</td></tr>
  <tr><td><code>--locale</code></td>   <td>The locale to use for the command output.</td></tr>
  <tr><td><code>--timezone</code></td> <td>The timezone for the dates to be formatted.</td></tr>
  <tr><td><code>--encoding</code></td> <td>The encoding to use for the command output.</td></tr>
  <tr><td><code>--colors</code></td>   <td>Whether colorized output shall be enabled.</td></tr>
  <tr><td><code>--brief</code></td>    <td>Whether the output should contains only brief information.</td></tr>
  <tr><td><code>--verbose</code></td>  <td>Whether the output should contains more detailed information.</td></tr>
  <tr><td><code>--debug</code></td>    <td>Prints full stack trace in case of failure.</td></tr>
  <tr><td><code>--help</code></td>     <td>Lists the options available for a specific command.</td></tr>
</table>

The `--locale`, `--timezone` and `--encoding` options apply to the command output sent to the standard output stream,
but usually do not apply to the error messages sent to the standard error stream.
The reason is that command output may be targeted to a client, while the error messages are usually for the operator.



Examples    {#examples}
=======================

Extracting ISO 19111 Coordinate Reference System (CRS)    {#crs}
----------------------------------------------------------------

SIS can read Coordinate Reference System (CRS) definitions from various sources:

  * Code from the EPSG geodetic dataset
  * _Well Known Text_ (WKT) format version 1 and 2
  * _Geographic Markup Language_ (GML) version 3.2

The easiest way is see a CRS definition is to use an EPSG code.
The [EPSG geodetic dataset](http://www.epsg.org/) is a widely-used source of definitions for thousands of Coordinate Reference Systems.
Appache SIS provides a [list of supported codes](book/tables/CoordinateReferenceSystems.html), which can be queried from the command line.
For example the following command prints the definition of the _"JGD2011 / Japan Plane Rectangular CS VIII"_ Coordinate Reference System:

    :::bash
    sis crs EPSG:6676

The first time that a command requires the EPSG dataset, Apache SIS will propose to download and install a local copy.
This automatic download happen only when using the command-line tools described in this page.
Developers who wish to use the EPSG dataset in their applications can use the Maven artifact documented in (TODO).

<details>
  <summary>The above command should produce the following output (click to expand):</summary>
<pre>ProjectedCRS["JGD2011 / Japan Plane Rectangular CS VIII",
  BaseGeodCRS["JGD2011",
    Datum["Japanese Geodetic Datum 2011",
      Ellipsoid["GRS 1980", 6378137.0, 298.257222101]],
    Unit["degree", 0.017453292519943295]],
  Conversion["Japan Plane Rectangular CS zone VIII",
    Method["Transverse Mercator"],
    Parameter["Latitude of natural origin", 36.0],
    Parameter["Longitude of natural origin", 138.5],
    Parameter["Scale factor at natural origin", 0.9999],
    Parameter["False easting", 0.0],
    Parameter["False northing", 0.0]],
  CS[Cartesian, 2],
    Axis["Northing (X)", north],
    Axis["Easting (Y)", east],
    Unit["metre", 1],
  Scope["Large and medium scale topographic mapping, cadastral and engineering survey."],
  Area["Japan - onshore - Honshu between approximately 137°45'E and 139°E - Niigata-ken; Nagano-ken; Yamanashi-ken; Shizuoka-ken."],
  BBox[34.54, 137.32, 38.58, 139.91],
  Id["EPSG", 6676, "8.9", URI["urn:ogc:def:crs:EPSG:8.9:6676"]],
  Remark["Replaces JGD2000 / Japan Plane Rectangular CS VIII (CRS code 2450) with effect from 21st October 2011."]]</pre>
</details>

The above output is compatible with version 2 of _Well Known Text_ (WKT) format.
However some applications are restricted to WKT version 1.
For an output using the legacy WKT 1 format, one can add the `--format wkt1` option to the above command.

The “WKT 2” specification allows some flexibility in keyword names and in the way to specify units of measurement.
By default, the command-line uses this flexibility for producing less verbose but still legal WKT 2 output.
If an output closer to the WKT 2 recommendations is desired, one can add the `--format wkt2` option to the above command.

Apache SIS can also read and write CRS definitions in the _Geographic Markup Language_ (GML) format.
For GML output, one can add the `--format xml` option to the above command.
Note that the result is quite verbose.



Extracting EPSG identifier from a Coordinate Reference System    {#identifier}
------------------------------------------------------------------------------

Because the EPSG geodetic dataset is so commonly used,
it is very common to define a CRS by only its EPSG code instead than its full definition.
Such codes can be written as “`EPSG:4326`” or “`urn:ogc:def:crs:EPSG::4326`” for instance.
In a _Well Known Text_ (WKT) string, the code appears at the bottom of the definition
in an element like `ID["EPSG", 4326]` or `AUTHORITY["EPSG", "4326"]`.
However in many case the code is missing.
But Apache SIS can find it by comparing a given CRS against the definitions in the EPSG database.

The following example read a WKT for the _“NTF (Paris) / Lambert zone II”_ Coordinate Reference System,
but in which the `ID["EPSG", 27572]` has been intentionally omitted.
Furthermore, the _“NTF (Paris) / Lambert zone II”_ name has been replaced by _“NTF (Paris) / zone to be discovered by the demo”_
Executing the following command:

    :::bash
    sis identifier http://sis.staging.apache.org/examples/MissingIdentifier.wkt

produces an output like below:

    :::text
        urn:ogc:def:crs:EPSG:8.9:27572    | NTF (Paris) / Lambert zone II

As we can see, SIS has been able to find back the identifier code and the actual CRS name.

Sometime a WKT declares wrongly an EPSG code.
The most frequent case is a WKT that defines a Coordinate Reference System with (_longitude_, _latitude_) axes,
but declare an EPSG code for a CRS with (_latitude_, _longitude_) axes.
Apache SIS can detect such mismatch.
For example executing the following command:

    :::bash
    sis identifier http://sis.staging.apache.org/examples/WrongAxisOrder.wkt

produces an output like below:

    :::text
    !   urn:ogc:def:crs:EPSG:8.9:4979    | WGS 84

    Legend:
    !   Identified object matches definition provided by authority except for coordinate system axes.

Apache SIS can perform such analysis because it “understands” the CRS definition.
This analysis capability can be tested by altering the CRS definition.
The following example asks the identifier of a CRS which is normally defined as below:

    :::text
    ProjectedCRS["WGS 84 / Mercator 41",
      (... definition omitted for brevity ...)
        Method["Mercator (variant B)"],
        Parameter["Latitude of 1st standard parallel", -41.0],
      (... definition omitted for brevity ...)

However in this example, we will provide a CRS defined as below:

    :::text
    ProjectedCRS["Scaled Mercator",
      (... definition omitted for brevity ...)
        Method["Mercator (variant A)"],
        Parameter["Scale factor at natural origin", 0.7557992272019596"],
        Parameter["Latitude of natural origin", -0.0],
      (... definition omitted for brevity ...)

Executing the following command:

    :::bash
    sis identifier http://sis.staging.apache.org/examples/EquivalentDefinition.wkt

produces an output like below:

    :::text
        urn:ogc:def:crs:EPSG:8.9:3994    | WGS 84 / Mercator 41

Apache SIS has been able to detect that the second CRS is numerically equivalent to the first one,
and return the identifier for the CRS that we should use.



Extracting ISO 19115 Metadata    {#metadata}
--------------------------------------------

SIS can read the header of a data file and print the metadata in an ISO 19115 structure.
The data file given in argument can be a local file or a URL.
By default, the metadata are shown in a relatively compact tree-table format.
But the metadata can optionally be exported as an ISO 19139 compliant XML document.

<blockquote><b>Note:</b>
As of SIS 0.6, only CF-compliant NetCDF files or ISO 19139 XML documents can be given in argument to this command.
</blockquote>

The following example show the metadata of a NetCDF file accessible from the web:

    :::bash
    sis metadata https://github.com/opengeospatial/geoapi/raw/master/geoapi-netcdf/src/test/resources/org/opengis/wrapper/netcdf/NCEP-SST.nc
<details>
  <summary>Below is an extract of the above command output:</summary>
<pre>Metadata
  ├─Identification info
  │   ├─Citation
  │   │   ├─Title……………………………………………………………………………… Sea Surface Temperature Analysis Model
  │   │   ├─Date
  │   │   │   ├─Date……………………………………………………………………… Sep 22, 2005 2:00:00 AM
  │   │   │   └─Date type………………………………………………………… Creation
  │   │   └─Identifier
  │   │       ├─Code……………………………………………………………………… NCEP/SST/Global_5x2p5deg/SST_Global_5x2p5deg_20050922_0000.nc
  │   │       └─Authority
  │   │           └─Title………………………………………………………… edu.ucar.unidata
  │   ├─Abstract………………………………………………………………………………… NCEP SST Global 5.0 x 2.5 degree model data
  │   ├─Descriptive keywords
  │   │   ├─Keyword………………………………………………………………………… EARTH SCIENCE &gt; Oceans &gt; Ocean Temperature &gt; Sea Surface Temperature
  │   │   ├─Type………………………………………………………………………………… Theme
  │   │   └─Thesaurus name
  │   │       └─Title…………………………………………………………………… GCMD Science Keywords
  │   ├─Resource constraints
  │   │   └─Use limitation……………………………………………………… Freely available
  │   ├─Spatial representation type……………………………… Grid
  │   └─Extent
  │       ├─Geographic element
  │       │   ├─West bound longitude…………………………… 180°W
  │       │   ├─East bound longitude…………………………… 180°E
  │       │   ├─South bound latitude…………………………… 90°S
  │       │   ├─North bound latitude…………………………… 90°N
  │       │   └─Extent type code……………………………………… true
  │       └─Vertical element
  │           ├─Minimum value……………………………………………… 0
  │           └─Maximum value……………………………………………… 0
  └─Content info
      └─Dimension
          ├─Descriptor………………………………………………………………… Sea temperature
          └─Sequence identifier………………………………………… SST</pre>
</details>


Adding the `--format xml` option to the above command will format the same metadata in a XML document.
The output is not shown in this page because of its verbosity.



Performance consideration    {#performance}
===========================================

If there is a large amount of files to process, invoking the above command many time may be inefficient
since it would restart a new JVM on every invocation. For such cases, it is more efficient to loop inside
a small Java program using the [SIS API](apidocs/index.html).
