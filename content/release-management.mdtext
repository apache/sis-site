Title:  Release management
Notice: Licensed to the Apache Software Foundation (ASF) under one
        or more contributor license agreements.  See the NOTICE file
        distributed with this work for additional information
        regarding copyright ownership.  The ASF licenses this file
        to you under the Apache License, Version 2.0 (the
        "License"); you may not use this file except in compliance
        with the License.  You may obtain a copy of the License at
        .
          http://www.apache.org/licenses/LICENSE-2.0
        .
        Unless required by applicable law or agreed to in writing,
        software distributed under the License is distributed on an
        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
        KIND, either express or implied.  See the License for the
        specific language governing permissions and limitations
        under the License.


This page describes how to create and deploy the SIS Maven artifacts, binary bundle, javadoc and list of API changes.
The [Release FAQ][release-faq] page describes the foundation wide policies.
The instructions on this page provide a summary suitable to SIS releases, together with SIS-specific steps.
The intended audiences are SIS release managers.

[TOC]



Requirements    {#requirements}
===============================

Before to perform a release, make sure that the following conditions hold:

  * Commands will be executed in a Unix shell.
  * Subversion, GNU GPG, ZIP, Maven, Ant, Java and the Java compiler are available on the path.
  * The [release management setup](release-management-setup.html) steps have been executed once.

For all instructions in this page, `$OLD_VERSION` and `$NEW_VERSION` stand for the version
number of the previous and the new release respectively, and `$RELEASE_CANDIDATE` stands for
the current release attempt. Those versions shall be set on the command line like below (Unix):

    :::bash
    export OLD_VERSION=0.3
    export NEW_VERSION=0.4
    export RELEASE_CANDIDATE=1
    export SIGNING_KEY=<your key ID>



Directory layout    {#directory-layout}
---------------------------------------

The steps described in this page assume the following directory layout (some directories will be created as
a result of the steps). Any other layout can be used. However if the layout differs, then the relative paths
in this page shall be adjusted accordingly.

    :::text
    <any root directory for SIS>
    ├─ trunk
    ├─ branches
    │  └─ $NEW_VERSION
    ├─ tags
    │  └─ $NEW_VERSION
    │     └─ target
    │        └─ bundles
    ├─ distribution
    │  └─ $NEW_VERSION
    │     └─ RC$RELEASE_CANDIDATE
    └─ site
       └─ content
          └─ apidocs



Prepare documentation    {#prepare-documentation}
=================================================

Update [JIRA][JIRA] tasks and prepare release notes as below:

  * Ensure that the _Fix Version_ in issues resolved since the last release includes this release version correctly.
  * Ensure that all open issues are resolved or closed before proceeding further.
  * On the `site` source code repository, create a `content/release-notes/$NEW_VERSION.html` file with all the features added.
  * Use `content/release-notes/$OLD_VERSION.html` as a template, omitting everything between the `<body>` and `</body>` tags.
  * The release notes can be obtained from JIRA, by clicking on the _Versions_ tab → the version number → _Release notes_
    and then configuring the release notes to display HTML format and copying it.
    A suggested approach would be to reorganize the release notes as
    _New Features_, then _Improvements_, then _Bug Fixes_, then _Tests_ and finally _Tasks_.
    The _Sub Tasks_ can be classified according the category of their parent issue.

Other files to update:

  * Review and update the `README` file on the `trunk` source code repository.
  * Commit any changes back to SVN.



Web site    {#prepare-website}
------------------------------

Update the version numbers from `$NEW_VERSION` to the next version in the following files.

  * `content/index.mdtext`
  * `content/downloads.mdtext`

Commit:

    :::bash
    svn add content/release-notes/$NEW_VERSION.html
    svn commit --message "Document the $NEW_VERSION release."

The new web site will be published in the [staging area](http://sis.staging.apache.org).
It will not yet be published on `http://sis.apache.org`.



Create branch    {#branch}
==========================

Execute the following command:

    :::bash
    svn copy https://svn.apache.org/repos/asf/sis/trunk \
             https://svn.apache.org/repos/asf/sis/branches/$NEW_VERSION \
             --message "Create the $NEW_VERSION branch."

Move to a directory containing the project branches (presumed to be `../branches` in the following command,
but can be replaced by anything else), then checkout a clean copy of the branch to release:

    :::bash
    cd ../branches
    svn checkout https://svn.apache.org/repos/asf/sis/branches/$NEW_VERSION
    cd $NEW_VERSION
    export BRANCH_DIR=`pwd`

We need to update the Subversion URL and SIS version numbers not only in the `pom.xml` files,
but also in a few Java files. The following command performs the replacement using Ant:

    :::bash
    ant -buildfile core/sis-build-helper/src/main/ant/prepare-release.xml branch -Dsis.version=$NEW_VERSION

Open the root `pom.xml` file in an editor and perform the following changes:

  * Copy-and-paste the whole `<plugin>` section for `maven-javadoc-plugin` from `<reporting>` to `<build>`.
    We need the javadoc configuration to be duplicated in both `<reporting>` and `<build>` sections in order
    to get the expected Javadoc output in both Maven site and in the `*-javadoc.jar` files to deployed in the
    Maven repository. **TODO:** see if upgrading Maven or the `maven-javadoc-plugin` can solve this problem.
  * Remove the whole `<pluginRepositories>` section, since it should not be needed for releases (and is actually not allowed).
  * Remove the `<plugin>` section for `docbkx-maven-plugin`, since the DocBook directory is omitted (see below).

Recursively delete the `src/main/docbook` directory (this policy may be revised in future SIS releases).
We omit this directory for now because this material may move to the CMS, and no English version is available yet.

In `core/sis-utility/src/main/java/org/apache/sis/internal/system/Supervisor.java`, consider setting
the `ENABLED` flag to `false`. This policy may be revised in future SIS releases.

Commit the changes on the branch:

    :::bash
    svn commit --message "Prepare the branch for the $NEW_VERSION release."



Verify content    {#branch-verify}
----------------------------------

Starts the GPG agent if not already done.
This is for avoiding to be prompted many time for the passphrase in every modules to be built by Maven.
Note that MacOS users can skip this step if their passphrase is stored in the OS keychain,

    :::bash
    eval $(gpg-agent --daemon)

Try a dry run of the `release:prepare` goal. This goals checks for `SNAPSHOT` dependencies in `pom.xml` files.
It will not complete the prepare goal until all snapshot dependencies are resolved.
If anything goes wrong, the directory can be cleaned by running the `release:clean` goal
before to fix the problem and try again.

    :::bash
    mvn release:prepare --define releaseVersion=$NEW_VERSION --define tag=$NEW_VERSION \
        --define autoVersionSubmodules=true --define updateWorkingCopyVersions=false --define dryRun=true

The dry run will not commit any changes back to SVN. Instead, it will create `pom.xml.tag` files containing
the changes that would have been committed to SVN. We keep those files for verification purpose in the next section.

Verify signature for all files:

    :::bash
    find . -name "sis-*.asc" -exec gpg --verify '{}' \;



Create tag    {#tag}
====================

In theory, the next commands would be a real (non-dry) run of `mvn release:prepare`, followed by `mvn release:perform`.
However we perform those steps manually rather than relying on Maven for the following reasons:

  * Perform some additional changes on the tag.
  * Reduce the amount of commits on SVN (avoid a rollback in branch directory).
  * Give more opportunities to take action before commit in case of problems.
  * We need a separated `install` phase first, for proper installation of `sis-build-helper` plugin.

First, create the tag:

    :::bash
    svn copy https://svn.apache.org/repos/asf/sis/branches/$NEW_VERSION \
             https://svn.apache.org/repos/asf/sis/tags/$NEW_VERSION \
             --message "Create the $NEW_VERSION tag for RC$RELEASE_CANDIDATE."

Checkout:

    :::bash
    cd ../../tags
    svn checkout https://svn.apache.org/repos/asf/sis/tags/$NEW_VERSION
    cd $NEW_VERSION
    export TAG_DIR=`pwd`

Update versions number in `pom.xml` files (like what `mvn release:prepare` would have done),
plus some additional files:

    :::bash
    ant -buildfile core/sis-build-helper/src/main/ant/prepare-release.xml tag -Dsis.version=$NEW_VERSION

Compare with the modifications done by `mvn release:prepare`. The following command should report no difference,
ignoring the license or other information that may have been removed by the Maven plugin
(this has been known to happen if the starting `<project>` tag is not on a single line).

    :::bash
    find . -name "pom.xml" -exec diff '{}' $BRANCH_DIR/'{}'.tag \;

Commit:

    :::bash
    svn commit --message "Fix version number and SVN directory."

Clean the branch, since we will not need it anymore:

    :::bash
    cd $BRANCH_DIR
    mvn release:clean
    mvn clean



Deploy Maven artifacts    {#maven-deploy}
=========================================

Execute an `install` phase first (required for our custom `sis-build-helper` plugin),
and generate the binary artifact (`pack.gz` file). The later will fail if duplicated
class files or resources are found. Consequently building the `pack.gz` file is an
additional test worth to do before deployment.
.

    :::bash
    cd $TAG_DIR
    mvn clean install
    mvn org.apache.sis.core:sis-build-helper:$NEW_VERSION:pack --non-recursive

If the above succeeded, deploy. We temporarily delete the Maven site descriptors (`site.xml`)
for preventing Maven to deploy them, since there is no apparent reason why users would want to
download site descriptors from a Maven repository.

    :::bash
    find . -name "site.xml" -delete
    mvn deploy --activate-profiles apache-release
    svn revert . --recursive



Verify and close the Nexus release artifacts    {#nexus-close}
--------------------------------------------------------------

Verify the staged artifacts in the [Nexus repository][repository].
The artifacts can be found under _Build Promotion_ → _Staging repositories_, and searching for `org.apache.sis` in the _Repository_ column.
Navigate through the artifact tree and make sure that all javadoc, source, test and jar files have `.asc` (GPG signature) and `.md5` files.

Additional references about signatures:

   * [Maven repository PGP signature checker FAQ](http://people.apache.org/~henkp/repo/faq.html)
   * [Release signing][release-signing] (cited in the [Release setup](release-management-setup.html) page)

Select any `*-javadoc.jar` file and click on the <cite>Archive Browser</cite> tab on the right side.
Select any `*.html` file which is known to use some of the custom taglets defined in the `sis-build-helper` module.
Click on that file and verify that the custom elements are rendered properly.
In particular, all Java code snippets are missing if the `@preformat` taglet had not be properly registered,
so try to see at least one code snippet.

Additional cleaning:

  * Delete all `org/apache/sis/parent/$NEW_VERSION/parent-$NEW_VERSION-source-release.zip.*` files on the Nexus repository.
    They should not be there - source release will be deployed on an other repository later.

Close the Nexus staging repository:

  * Click the checkboxes for the open staging repositories (`org.apache.sis-<id>`) and press _Close_ in the menu bar.
  * In the description field, enter "`SIS $NEW_VERSION-$RELEASE_CANDIDATE`"
    (replace `$NEW_VERSION` and `$RELEASE_CANDIDATE` by appropriate values.
    This will not be done automatically since this field box is not our bash shell!).
  * Click on the `org.apache.sis-<id>` link in order to get the URL to the temporary Maven repository created by Nexus.

We will announce later (in the <cite>Put the release candidate up for a vote</cite> section) on the `dev@` mailing list
the availability of this temporary repository for testing purpose.



Test the Nexus release artifacts    {#nexus-text}
-------------------------------------------------

Go to the test Maven project. Open the root `pom.xml` file, go to the `<url>` declaration and replace value by
the URL of the temporary Maven repository created by Nexus. Usually, only the 3 last digits need to be updated.
Set the `<version>` number to the SIS release to be tested.

    :::bash
    cd ../../release-test/maven
    vim pom.xml
    svn commit -m "Test project for SIS $NEW_VERSION-RC$RELEASE_CANDIDATE"

Clear the local Maven repository in order to force downloads from the Nexus repository, then test.
This will also verify the checksums.

    rm -r ~/.m2/repository/org/apache/sis
    mvn package --strict-checksums



Stage the source, binary and javadoc artifacts    {#stage}
==========================================================

Generate the Javadoc. While not mandatory, we suggest to use JDK 7 or above for getting the new look and feel,
getting the Javadoc enhancements expected in future JDK releases (more dynamic pages),
avoiding the security vulnerability discovered in the Javadoc tools of older JDK releases,
and keeping the `diff` smaller on the SVN repository of SIS web site.
If JDK7 is *not* used, then omit the `cp` command below.

    :::bash
    cp ../../JDK7/src/main/javadoc/stylesheet.css src/main/javadoc/
    mvn site --define skipTests=true
    svn revert src/main/javadoc/stylesheet.css
    cd target/site
    zip -9 -r apache-sis-$NEW_VERSION-doc.zip apidocs
    cd ../..



Initialize the distribution directory    {#dist}
------------------------------------------------

Create the directory for the new version and release candidate within the distribution directory.
The `$RELEASE_CANDIDATE` variable shall be the number of current release attempt.

    :::bash
    cd ../../distribution
    mkdir -p $NEW_VERSION/RC$RELEASE_CANDIDATE
    svn add $NEW_VERSION
    cd $NEW_VERSION/RC$RELEASE_CANDIDATE
    export DIST_DIR=`pwd`

Copy the `HEADER.html` file from the previous release.
Update the file content if necessary.

    :::bash
    svn copy https://dist.apache.org/repos/dist/release/sis/$OLD_VERSION/HEADER.html .

Move the files generated by Maven to the distribution directory:

    :::bash
    mv $TAG_DIR/target/sis-$NEW_VERSION-* .
    mv $TAG_DIR/target/site/apache-sis-$NEW_VERSION-* .

Rename the files to something more conform to the convention seen in other Apache projects:

    :::bash
    mv sis-$NEW_VERSION-source-release.zip     apache-sis-$NEW_VERSION-src.zip
    mv sis-$NEW_VERSION-source-release.zip.asc apache-sis-$NEW_VERSION-src.zip.asc



Create the binary artifact    {#binary}
---------------------------------------

Create the binary artifact:

    :::bash
    cp -r $TAG_DIR/application/sis-console/src/main/artifact apache-sis-$NEW_VERSION
    cd apache-sis-$NEW_VERSION
    cp $TAG_DIR/LICENSE .
    cp $TAG_DIR/NOTICE .
    mv $TAG_DIR/target/bundles/apache-sis-$NEW_VERSION.pack.gz lib/sis.pack.gz
    cd ..
    zip -9 -r apache-sis-$NEW_VERSION-bin.zip apache-sis-$NEW_VERSION
    rm -r apache-sis-$NEW_VERSION



Sign and commit    {#sign}
--------------------------

Sign the source, javadoc and binary artifacts:

    :::bash
    gpg --print-md SHA512 apache-sis-$NEW_VERSION-src.zip > apache-sis-$NEW_VERSION-src.zip.sha
    gpg --print-md MD5    apache-sis-$NEW_VERSION-src.zip > apache-sis-$NEW_VERSION-src.zip.md5

    gpg --armor --detach-sign --default-key $SIGNING_KEY    apache-sis-$NEW_VERSION-doc.zip
    gpg --print-md SHA512 apache-sis-$NEW_VERSION-doc.zip > apache-sis-$NEW_VERSION-doc.zip.sha
    gpg --print-md MD5    apache-sis-$NEW_VERSION-doc.zip > apache-sis-$NEW_VERSION-doc.zip.md5

    gpg --armor --detach-sign --default-key $SIGNING_KEY    apache-sis-$NEW_VERSION-bin.zip
    gpg --print-md SHA512 apache-sis-$NEW_VERSION-bin.zip > apache-sis-$NEW_VERSION-bin.zip.sha
    gpg --print-md MD5    apache-sis-$NEW_VERSION-bin.zip > apache-sis-$NEW_VERSION-bin.zip.md5

Verify checksums and signatures:

    :::bash
    find . -name "*.md5" -exec shasum --check '{}' \;
    find . -name "*.sha" -exec shasum --check '{}' \;
    find . -name "*.asc" -exec gpg --verify '{}' \;

Commit:

    :::bash
    svn add apache-sis-$NEW_VERSION-*
    cd ../..
    svn commit --message "SIS release candidate $RELEASE_CANDIDATE"



Update online Javadoc     {#apidocs}
------------------------------------

Copy the Javadoc to the web site staging directory:

    :::bash
    cd ../site/content
    rm -r apidocs
    unzip $DIST_DIR/apache-sis-0.3-doc.zip

Execute `svn add` for new files and `svn remove` for deleted files:

    :::bash
    cd apidocs
    svn status | gawk '/^\?.*/ {print $2}' | xargs -r svn add
    svn status | gawk '/^\!.*/ {print $2}' | xargs -r svn remove



Test the release    {#test}
---------------------------

Execute the following commands in any temporary directory:

    :::bash
    wget --no-check-certificate https://dist.apache.org/repos/dist/dev/sis/$NEW_VERSION/RC$RELEASE_CANDIDATE/apache-sis-$NEW_VERSION-src.zip \
                                https://dist.apache.org/repos/dist/dev/sis/$NEW_VERSION/RC$RELEASE_CANDIDATE/apache-sis-$NEW_VERSION-src.zip.asc
    # Test
    gpg --verify apache-sis-$NEW_VERSION-src.zip.asc
    unzip apache-sis-$NEW_VERSION-src.zip
    cd sis-$NEW_VERSION
    mvn install



Put the release candidate up for a vote    {#vote}
==================================================

  * Create a VOTE email thread on `dev@` to record votes as replies.
    A template is available [here](templates/release-vote.txt).
  * Create a DISCUSS email thread on `dev@` for any vote questions.
    A template is available [here](templates/release-discuss.txt).
  * Perform a review of the release and cast your vote:
  * a -1 vote does not necessarily mean that the vote must be redone, however it is usually a good idea
    to rollback the release if a -1 vote is received. See _Recovering from a vetoed release_ below.
  * After the vote has been open for at least 72 hours, has at least three +1 PMC votes and no -1 votes,
    then post the results to the vote thread:
    + Reply to the initial email and prepend to the original subject "[RESULT]"
    + Include a list of everyone who voted +1, 0 or -1.



Recovering from a vetoed release    {#veto}
-------------------------------------------

Reply to the initial vote email and prepend to the original subject:

    ::text
    [CANCELED]

Delete the svn tag created by the release:perform step:

    ::bash
    svn delete https://svn.apache.org/repos/asf/sis/tags/$NEW_VERSION --message "deleting tag from rolled back release"

Drop the Nexus staging repository:

  * Go to [Nexus repository][repository] → _Build Promotion_ → _Staging repositories_ and search for `org.apache.sis` in the _Repository_ column.
  * Right click on the closed staging repositories (`org.apache.sis-<id>`) and select _Drop_.

Make the required updates that caused the vote to be canceled during the release cycle.



Finalize the release    {#finalize}
===================================

The artificats in the repository are not yet mirrored and available for Maven to download.
Promote the staged Nexus artifacts, by releasing them.

  * Go to [Nexus repository][repository] → _Build Promotion_ → _Staging repositories_ and search for `org.apache.sis` in the _Repository_ column.
  * Click the checkboxes of the closed staging repositories (`org.apache.sis-<id>`) and press _Release_ in the menu bar.

Check in the source and binary artifacts into distribution svn which will be pulled by all mirrors within 24 hours.
The `dist/dev` svn is not mirrored, but the `dist/release` is.
From any directory:

    :::bash
    svn copy https://dist.apache.org/repos/dist/dev/sis/$NEW_VERSION/RC$RELEASE_CANDIDATE \
             https://dist.apache.org/repos/dist/release/sis/$NEW_VERSION \
        --message "Committing SIS Source and Binary Release Candidate $RELEASE_CANDIDATE for SIS-$NEW_VERSION."

    svn delete https://dist.apache.org/repos/dist/dev/sis/$NEW_VERSION \
        --message "Delete SIS $NEW_VERSION staging repository after release."

Delete the prior version:

    :::bash
    svn delete https://dist.apache.org/repos/dist/release/sis/$OLD_VERSION \
        --message "Archive SIS-$OLD_VERSION after release of SIS-$NEW_VERSION."

Update the staged web site:

  * Make a news announcement on the SIS home page.
  * Update the downloads page to add new version using the mirrored URLs.
  * Modify the URL for the prior release to the archived URL for the release.

Update [JIRA][JIRA]:

  * Update the JIRA versions to mark the version as "released".
  * Set the date to the date that the release was approved.
  * Prepare for the next release:
    + Make a new release entry in JIRA for the next release.
    + Update the [Roadmap](https://cwiki.apache.org/confluence/display/SIS/Roadmap) wiki page.



Verify release signatures    {#verify}
--------------------------------------

Download all source and binary artifacts into a new directory, then execute in that directory:

    :::bash
    find . -name "*.asc" -exec gpg --verify '{}' \;

The output shall report only good signatures.



Announce the release    {#announce}
-----------------------------------

  * WAIT 24 hours after committing releases for mirrors to replicate.
  * Publish the web site updates:
    + Login to the [ASF Content Management System][cms-admin].
    + Click on _Publish sis site_.
  * Make an announcement about the release on the `dev@`, `users@`, and `announce@` mailing lists.
    A template is available [here](templates/release-announce.txt).



Update trunk for the next development cycle    {#next-release}
==============================================================

Update the version numbers in the `pom.xml` files on trunk with the following command:

    :::bash
    mvn release:update-versions

Report the changes manually on the JDK6 and JDK7 branches.



[release-faq]:      http://www.apache.org/dev/release.html
[JIRA]:             http://issues.apache.org/jira/browse/SIS
[cms-admin]:        https://cms.apache.org/sis/
[repository]:       https://repository.apache.org/index.html
[release-signing]:  http://www.apache.org/dev/release-signing.html
