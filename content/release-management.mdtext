Title:  Release management
Notice: Licensed to the Apache Software Foundation (ASF) under one
        or more contributor license agreements.  See the NOTICE file
        distributed with this work for additional information
        regarding copyright ownership.  The ASF licenses this file
        to you under the Apache License, Version 2.0 (the
        "License"); you may not use this file except in compliance
        with the License.  You may obtain a copy of the License at
        .
          http://www.apache.org/licenses/LICENSE-2.0
        .
        Unless required by applicable law or agreed to in writing,
        software distributed under the License is distributed on an
        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
        KIND, either express or implied.  See the License for the
        specific language governing permissions and limitations
        under the License.


This page describes how to create and deploy the SIS Maven artifacts, binary bundle, javadoc and list of API changes.
The [Release FAQ][release-faq] page describes the foundation wide policies.
The instructions on this page provide a summary suitable to SIS releases, together with SIS-specific steps.
The intended audiences are SIS release managers.

[TOC]



Requirements
============

Before to perform a release, make sure that the following conditions hold:

  * Commands will be executed in a Unix shell.
  * Subversion, GNU GPG, ZIP, Maven, Ant, Java and the Java compiler are available on the path.
  * The [release management setup](release-management-setup.html) steps have been executed once.

For all instructions in this page, `$OLD_VERSION` and `$NEW_VERSION` stand for the version
number of the previous and the new release respectively, and `$RELEASE_CANDIDATE` stands for
the current release attempt. Those versions shall be set on the command line like below (Unix):

    :::bash
    export OLD_VERSION=0.3
    export NEW_VERSION=0.4
    export RELEASE_CANDIDATE=1



Directory layout
----------------

The steps described in this page assume the following directory layout (some directories will be created as
a result of the steps). Any other layout can be used. However if the layout differs, then the relative paths
in this page shall be adjusted accordingly.

    :::text
    <any root directory for SIS>
    ├─ trunk
    ├─ branches
    │  └─ $NEW_VERSION
    ├─ tags
    │  └─ $NEW_VERSION
    │     └─ target
    │        └─ bundles
    └─ distribution
       └─ $NEW_VERSION
          └─ RC$RELEASE_CANDIDATE



Prepare documentation
=====================

Update [JIRA][JIRA] tasks and prepare release notes as below:

  * Ensure that the _Fix Version_ in issues resolved since the last release includes this release version correctly.
  * Ensure that all open issues are resolved or closed before proceeding further.
  * On the `site` source code repository, create a `content/release-notes/$NEW_VERSION.html` file with all the features added.
  * Use `content/release-notes/$OLD_VERSION.html` as a template, omitting everything between the `<body>` and `</body>` tags.
  * The release notes can be obtained from JIRA, by clicking on the _Roadmap_ tab → the version number → _Release notes_
    and then configuring the release notes to display HTML format and copying it.
    A suggested approach would be to reorganize the release notes as
    _New Features_, then _Improvements_, then _Bug Fixes_, then _Tests_ and finally _Tasks_.
    The _Sub Tasks_ can be classified according the category of their parent issue.
  * Review and update the `README` file.
  * Commit any changes back to SVN.
  * Update the following Wiki pages:
    + [Roadmap][https://cwiki.apache.org/confluence/display/SIS/Roadmap]



Prepare the web site
====================

Update the version numbers from `$NEW_VERSION` to the next version in the following files.

  * `content/index.mdtext`
  * `content/downloads.mdtext`

Commit:

    :::bash
    svn add content/release-notes/$NEW_VERSION.html
    svn commit --message "Document the $NEW_VERSION release."

The new web site will be published in the [staging area][http://sis.staging.apache.org].
It will not yet be published on `http://sis.apache.org`.



Create a branch
===============

Execute the following command:

    :::bash
    svn copy https://svn.apache.org/repos/asf/sis/trunk https://svn.apache.org/repos/asf/sis/branches/$NEW_VERSION --message "Create the $NEW_VERSION branch."

Move to a directory containing the project branches (presumed to be `../branches` in the following command,
but can be replaced by anything else), then checkout a clean copy of the branch to release:

    :::bash
    cd ../branches
    svn checkout https://svn.apache.org/repos/asf/sis/branches/$NEW_VERSION
    cd $NEW_VERSION

We need to update the Subversion URL and SIS version numbers not only in the `pom.xml` files,
but also in a few Java files. The following command performs the replacement using Ant:

    :::bash
    ant -buildfile core/sis-build-helper/src/main/ant/prepare-branch.xml -Dsis.version=$NEW_VERSION

Open the root `pom.xml` file in an editor and remove the following sections:

  * The whole `<pluginRepositories>` section, since it should not be needed for releases (and is actually not allowed).
  * The `<plugin>` section for `docbkx-maven-plugin`, since the DocBook directory is omitted (see below).

Recursively delete the `src/main/docbook` directory (this policy may be revised in future SIS releases).
We omit this directory for now because this material may move to the CMS, and no English version is available yet.

In `core/sis-utility/src/main/java/org/apache/sis/internal/system/Supervisor.java`, consider setting
the `ENABLED` flag to `false`. This policy may be revised in future SIS releases.

Commit the changes on the branch:

    :::bash
    svn commit --message "Prepare the branch for the $NEW_VERSION release."



Verify the branch content
=========================

Try a dry run of the `release:prepare` goal. This goals checks for `SNAPSHOT` dependencies in `pom.xml` files.
It will not complete the prepare goal until all `SNAPSHOT` dependencies are resolved.
If anything goes wrong, the directory can be cleaned by running the `release:clean` goal
before to fix the problem and try again.

    :::bash
    mvn release:prepare --define releaseVersion=$NEW_VERSION --define tag=$NEW_VERSION \
        --define autoVersionSubmodules=true --define updateWorkingCopyVersions=false --define dryRun=true

The dry run will not commit any changes back to SVN. Instead, it will create `pom.xml.tag` files containing
the changes that would have been committed to SVN. This gives us the opportunity to verify that the release
process will complete as expected.

**Tip:** Maven should not prompt for any information except the GPG passphrase
(on MacOS, the passphrase will not be prompted if it is stored in keychain).
However if no GPG agent is running and if the passphrase is not in the OS keychain,
then Maven may prompt for the passphrase very often (many times per module).
For avoiding this annoyance, consider starting the `gpg-agent` daemon like below:

    :::bash
    eval $(gpg-agent --daemon)

Compare the original `pom.xml` files with the `pom.xml.tag` ones to see if the license or any other info has been removed.
This has been known to happen if the starting `<project>` tag is not on a single line.
The only things that should be different between these files are the `<version>` and `<scm>` elements.
Comparisons can be performed for all files with the following command:

    :::bash
    find . -name "pom.xml" -print -exec diff '{}' '{}'.tag \;

View the `release.properties` file and check for the following properties:

  * `exec.additionalArguments` shall contains `-Papache-release`
    (this profile shall be implied even if not explicitely specified on the command line).
  * `project.scm.org.apache.sis:parent.connection` shall be (ignoring escape characters)
    `scm:svn:http://svn.apache.org/repos/asf/sis/branches/$NEW_VERSION`.

Verify signature for all files:

    :::bash
    find . -name "sis-*.asc" -exec gpg --verify '{}' \;

Clean and ensure that there is no modified files, i.e. that the last `svn` command produces no output:

    :::bash
    mvn release:clean
    svn status



Deploy the release
==================

Run the `release:prepare` goal for real this time. The command is identical to the one in the
_Create a branch_ section except for the `dryRun` property, which is omitted.
This command will create the tag and commit the changes on SVN.

    :::bash
    mvn release:prepare --define releaseVersion=$NEW_VERSION --define tag=$NEW_VERSION \
        --define autoVersionSubmodules=true --define updateWorkingCopyVersions=false

In theory, the next command would be `mvn release:perform`.
However in fact, that command only checks out the project from tag folder and then run the `deploy` phase.
We need to perform those commands manually, because we need a separated `install` phase first,
then a `site` phase at deploy time (even if the site is not deployed) for proper execution of SIS custom taglets.

First, move to a directory containing the project tags (presumed to be `../../tags` in the following
command, but can be replaced by anything else), then checkout and deploy:

    :::bash
    cd ../../tags
    svn checkout https://svn.apache.org/repos/asf/sis/tags/$NEW_VERSION
    cd $NEW_VERSION
    mvn clean install --define skipTests=true
    mvn site deploy --activate-profiles apache-release

**Note:** the following options may need to be added after the last command:

  * If the local OS `userId` does not match the Apache `userId`, then the Apache one must be specified by
    `--define user.name=<apache_userId>`
  * If GPG contains more than one secret key, then the key to use for signing can be specified by
    `--define gpg.keyname=<key_id>`



Verify and close the Nexus release artifacts
============================================

Verify the staged artifacts in the [Nexus repository][repository].
The artifacts can be found under _Build Promotion_ → _Staging repositories_ → _Name column_ --> `org.apache.sis`.
Navigate through the artifact tree and make sure that all javadoc, source, test and jar files have
`.asc` (GPG signature) and `.md5` files.

Additional references about signatures:

   * [Maven repository PGP signature checker FAQ][http://people.apache.org/~henkp/repo/faq.html]
   * [Release signing][release-signing] (cited in the [Release setup][release-management-setup.html] page)

Close the Nexus staging repository: click the checkboxes for the open staging repositories
(`org.apache.sis-<module>`) and press _Close_ in the menu bar.



Stage the binary and javadoc artifacts to the distribution development repository
=================================================================================

Create the directory for the new version and release candidate within the distribution directory.
The `RC` number shall correspond to the current release attempt.

    :::bash
    mkdir ../../distribution/$NEW_VERSION

Create and put the binary artifact in the distribution directory:

    :::bash
    mvn org.apache.sis:sis-build-helper:$NEW_VERSION:pack --non-recursive
    mv target/bundles ../../distribution/$NEW_VERSION/RC$RELEASE_CANDIDATE

Create and put the javadoc in the distribution directory:

    :::bash
    cd target/site
    zip -9 -r ../../../../distribution/$NEW_VERSION/RC$RELEASE_CANDIDATE/sis-$NEW_VERSION-apidocs.zip apidocs
    cd ../..

Create and put the source code in the distribution directory:

    :::bash
    svn export . ../../distribution/$NEW_VERSION/RC$RELEASE_CANDIDATE/src --native-eol LF
    cd ../../distribution/$NEW_VERSION/RC$RELEASE_CANDIDATE
    zip -9 -r sis-$NEW_VERSION-src.zip src
    rm -r src

Sign the source, javadoc and binary artifacts:

    :::bash
    gpg --armor --detach-sign sis-$NEW_VERSION.src.zip
    gpg --print-md SHA512     sis-$NEW_VERSION.src.zip > sis-$NEW_VERSION.src.zip.sha
    gpg --print-md MD5        sis-$NEW_VERSION.src.zip > sis-$NEW_VERSION.src.zip.md5
    gpg --armor --detach-sign sis-$NEW_VERSION.apidocs.zip
    gpg --print-md SHA512     sis-$NEW_VERSION.apidocs.zip > sis-$NEW_VERSION.apidocs.zip.sha
    gpg --print-md MD5        sis-$NEW_VERSION.apidocs.zip > sis-$NEW_VERSION.apidocs.zip.md5
    gpg --armor --detach-sign sis-$NEW_VERSION.pack.gz
    gpg --print-md SHA512     sis-$NEW_VERSION.pack.gz > sis-$NEW_VERSION.pack.gz.sha
    gpg --print-md MD5        sis-$NEW_VERSION.pack.gz > sis-$NEW_VERSION.pack.gz.md5

Commit:

    :::bash
    cd ../..
    svn add $NEW_VERSION
    svn commit --message "SIS release candidate $RELEASE_CANDIDATE"

Verify that the files are downloadable from the
[http://dist.apache.org/repos/dist/dev/sis/][http://dist.apache.org/repos/dist/dev/sis/] sub-directory.



Put the release candidate up for a vote
=======================================

  * Create a VOTE email thread on `dev@` to record votes as replies.
    A template is available [here][release-vote.txt].
  * Create a DISCUSS email thread on `dev@` for any vote questions.
    A template is available [here][release-discuss.txt].
  * Perform a review of the release and cast your vote:
  * a -1 vote does not necessarily mean that the vote must be redone, however it is usually a good idea
    to rollback the release if a -1 vote is received. See _Recovering from a vetoed release_ below.
  * After the vote has been open for at least 72 hours, has at least three +1 PMC votes and no -1 votes,
    then post the results to the vote thread:
  * Reply to the initial email and prepend to the original subject "[RESULT]"
  * Include a list of everyone who voted +1, 0 or -1.



Finalize the release
====================

The artificats in the repository are not yet mirrored and available for Maven to download.
Promote the staged Nexus artifacts, by releasing them.

  * Go to [Nexus repository][repository] → _Build Promotion_ → _Staging repositories_ → _Name column_ --> `org.apache.sis`.
  * Click the checkboxes of the closed staging repositories (`org.apache.sis-<module>`) and press _Release_ in the menu bar.
  * Check in the source and binary artifacts into distribution svn which will be pulled by all mirrors within 24 hours.
    The `dist/dev` svn is not mirrored, but the `dist/release` is.

From any directory:

    :::bash
    svn copy https://dist.apache.org/repos/dist/dev/sis/$NEW_VERSION/RC$RELEASE_CANDIDATE \
             https://dist.apache.org/repos/dist/release/sis/$NEW_VERSION \
        --message "Committing SIS Source and Binary Release for SIS-$NEW_VERSION"

Update the staged web site:

  * Update the downloads page to add new version using the mirrored URLs.
  * Modify the URL for the prior release to the archived URL for the release.

Publish the web site:

  * WAIT 24 hours after committing releases for mirrors to replicate.
  * Publish the web site updates:
    + Login to the [ASF Content Management System][cms-admin].
    + Click on _Publish sis site_.

Delete the prior versions:

  * Navigate to the release directories checked out in the prior steps.
  * Delete the prior release artifacts using the `svn delete` command.
  * Commit the deletion.

Update the JIRA versions page to close all issues, mark the version as "released",
and set the date to the date that the release was approved.
Make a new release entry for the next release.



Announce the release
--------------------

  * Make a news announcement on the SIS home page.
  * Make an announcement about the release on the `dev@`, `users@, and `announce@` mailing lists.
    + Sample announce: [email](release-announce.txt).



Recovering from a vetoed release
================================

Reply to the initial vote email and prepend to the original subject:

    ::text
    [CANCELED]

Delete the svn tag created by the release:perform step:

    ::bash
    svn delete https://svn.apache.org/repos/asf/sis/tags/$NEW_VERSION --message "deleting tag from rolled back release"

Drop the Nexus staging repository:

  * Go to [Nexus repository][repository] → _Enterprise_ → _Staging tab_ → _Name column_ --> `org.apache.sis`.
  * Right click on the closed staging repositories (`org.apache.sis-<module>`) and select _Drop_.

Make the required updates that caused the vote to be canceled during the release cycle.



Verify release signatures
=========================

Download all source and binary artifacts into a new directory, then execute in that directory:

    :::bash
    find . -name "*.asc" -exec gpg --verify '{}' \;

The output shall report only good signatures.


Updating trunk
==============

Update the version numbers in the `pom.xml` files on trunk with the following command:

    :::bash
    mvn release:update-versions

Report the changes manually on the JDK6 and JDK7 branches.



[release-faq]:      http://www.apache.org/dev/release.html
[JIRA]:             http://issues.apache.org/jira/browse/SIS
[cms-admin]:        https://cms.apache.org/sis/
[repository]:       https://repository.apache.org/index.html
[release-signing]:  http://www.apache.org/dev/release-signing.html
